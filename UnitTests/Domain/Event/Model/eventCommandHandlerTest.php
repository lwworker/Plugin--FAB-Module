<?php
error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);

include_once(dirname(__FILE__) . '/../../../../Services/Autoloader/fabAutoloader.php');
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_object.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_db.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_db_mysqli.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_registry.class.php';

/**
 * Test class for eventValidate.
 * Generated by PHPUnit on 2013-01-03 at 11:48:05.
 */
class eventCommandHandlerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var eventValidate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $db = new lw_db_mysqli("root", "", "localhost", "fab_test");
        $db->connect();
        $this->db = $db;
        
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => "C:/xampp/htdocs/c38/contentory/c_server/plugins/",
                                     "plugin_path" => array ("lw" => "C:/xampp/htdocs/c38/contentory/c_server/modules/lw/")));
        $this->eventCommandHandler = new Fab\Domain\Event\Model\eventCommandHandler($this->db);
        $this->eventCommandHandler->setDebug(false);        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        #$this->db->setStatement("DROP TABLE t:fab_tagungen ");
        #$this->db->pdbquery();
    }

    /**
     * @todo Implement test().
     */
    public function testTableCreation()
    {
        $this->assertTrue($this->eventCommandHandler->createTable());
        $this->assertTrue($this->db->tableExists($this->db->gt("fab_tagungen")));
    }
    
    public function testAddEvent()
    {
        $array = array(
            "buchungskreis" => "15",
            "v_schluessel" => date("Hms").rand(10, 99),
            "auftragsnr" => "45135060",
            "bezeichnung" => "Tagung 1",
            "v_land" => "de",
            "v_ort" => "Ehrenfeld",
            "anmeldefrist_beginn" => "20130701",
            "anmeldefrist_ende" => "20130704",
            "v_beginn" => "20130905",
            "v_ende" => "20130916",
            "cpd_konto" => "200270",
            "erloeskonto" => "4510",
            "steuerkennzeichen" => "98",
            "steuersatz" => "9",
            "ansprechpartner" => "Max Mustermann",
            "ansprechpartner_tel" => "1111",
            "organisationseinheit" => "GB-F",
            "ansprechpartner_mail" => "m.mustermann@fz-juelich.de",
            "stellvertreter_mail" => "s.vertreter@fz-juelich.de",
            "standardbetrag" => "100",
        );
        $this->assertTrue($this->eventCommandHandler->addEvent($this->getInstace($array)));
    }
    
    public function testSaveEvent()
    {
        $this->db->setStatement("SELECT * FROM t:fab_tagungen ");
        $result = $this->db->pselect();
        $i = 1;
        foreach ($result as $value) {
            $value["bezeichnung"] = "Tagung 2";
            $value["buchungskreis"] = $i;
            
            $this->assertTrue($this->eventCommandHandler->saveEvent($value["id"], $this->getInstace($value)));
            
            $this->db->setStatement("SELECT * FROM t:fab_tagungen WHERE id = :id ");
            $this->db->bindParameter("id","i",$value["id"]);
            $entry = $this->db->pselect1();
            
            $this->assertEquals($i, intval($entry["buchungskreis"]));
            $this->assertEquals("Tagung 2", $entry["bezeichnung"]);
            $this->assertFalse("Tagung 1" == $entry["bezeichnung"]);
            $i++;
        }
    }
    
    public function testSaveReplacement()
    {
        $this->db->setStatement("SELECT * FROM t:fab_tagungen ");
        $result = $this->db->pselect();
        $i = 1;
        foreach ($result as $value) {
            $this->assertTrue($this->eventCommandHandler->saveReplacement($value["id"], "auto@logic-works.de"));
            
            $this->db->setStatement("SELECT * FROM t:fab_tagungen WHERE id = :id ");
            $this->db->bindParameter("id","i",$value["id"]);
            $entry = $this->db->pselect1();
            
            $this->assertEquals("auto@logic-works.de", $entry["stellvertreter_mail"]);
            $this->assertFalse("s.vertreter@fz-juelich.de" == $entry["stellvertreter_mail"]);
            $i++;
        }
    }
    
    public function testDeleteEvent()
    {
        
    }
    
    public function getInstace($array)
    {
        return new \LWddd\ValueObject($array);
    }

}

?>

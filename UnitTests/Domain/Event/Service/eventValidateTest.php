<?php

include_once(dirname(__FILE__).'/../../../../Services/Autoloader/fabAutoloader.php');

/**
 * Test class for eventValidate.
 * Generated by PHPUnit on 2013-01-03 at 11:48:05.
 */
class eventValidateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var eventValidate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => "C:/xampp/htdocs/c38/contentory/c_server/plugins/"));
        $this->eventValidate = new Fab\Domain\Event\Service\eventValidate();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testValidate().
     */
    public function testValidate() {

        $array = array(
            "id" => "1",
            "buchungskreis" => "15",
            "v_schluessel" => "65038462",
            "auftragsnr" => "45135060",
            "bezeichnung" => "Tagung 1",
            "v_land" => "de",
            "v_ort" => "Jülich",
            "anmeldefrist_beginn" => "20130701",
            "anmeldefrist_ende" => "20130704",
            "v_beginn" => "20130905",
            "v_ende" => "20130916",
            "cpd_konto" => "200270",
            "erloeskonto" => "4510",
            "steuerkennzeichen" => "98",
            "steuersatz" => "9",
            "ansprechpartner" => "Max Mustermann",
            "ansprechpartner_tel" => "1111",
            "organisationseinheit" => "GB-F",
            "ansprechpartner_mail" => "m.mustermann@fz-juelich.de",
            "stellvertreter_mail" => "s.vertreter@fz-juelich.de",
            "standardbetrag" => "100",
            "first_date" => "20130103124315",
            "last_date" => "20130103125519"
        );
        
        $this->assertTrue($this->eventValidate->idValidate($array["id"]));
        $this->assertTrue($this->eventValidate->buchungskreisValidate($array["buchungskreis"]));
        $this->assertTrue($this->eventValidate->v_schluesselValidate($array["v_schluessel"]));
        $this->assertTrue($this->eventValidate->auftragsnrValidate($array["auftragsnr"]));
        $this->assertTrue($this->eventValidate->bezeichnungValidate($array["bezeichnung"]));
        $this->assertTrue($this->eventValidate->v_landValidate($array["v_land"]));
        $this->assertTrue($this->eventValidate->v_ortValidate($array["v_ort"]));
        $this->assertTrue($this->eventValidate->anmeldefrist_beginnValidate($array["anmeldefrist_beginn"]));
        $this->assertTrue($this->eventValidate->anmeldefrist_endeValidate($array["anmeldefrist_ende"]));
        $this->assertTrue($this->eventValidate->v_beginnValidate($array["v_beginn"]));
        $this->assertTrue($this->eventValidate->v_endeValidate($array["v_ende"]));
        $this->assertTrue($this->eventValidate->cpd_kontoValidate($array["cpd_konto"]));
        $this->assertTrue($this->eventValidate->erloeskontoValidate($array["erloeskonto"]));
        $this->assertTrue($this->eventValidate->steuerkennzeichenValidate($array["steuerkennzeichen"]));
        $this->assertTrue($this->eventValidate->steuersatzValidate($array["steuersatz"]));
        $this->assertTrue($this->eventValidate->ansprechpartnerValidate($array["ansprechpartner"]));
        $this->assertTrue($this->eventValidate->ansprechpartner_telValidate($array["ansprechpartner_tel"]));
        $this->assertTrue($this->eventValidate->organisationseinheitValidate($array["organisationseinheit"]));
        $this->assertTrue($this->eventValidate->ansprechpartner_mailValidate($array["ansprechpartner_mail"]));
        $this->assertTrue($this->eventValidate->stellvertreter_mailValidate($array["stellvertreter_mail"]));
        $this->assertTrue($this->eventValidate->standardbetragValidate($array["standardbetrag"]));
        $this->assertTrue($this->eventValidate->first_dateValidate($array["first_date"]));
        $this->assertTrue($this->eventValidate->last_dateValidate($array["last_date"]));

        $this->eventValidate->setValues($array);
        $this->assertTrue($this->eventValidate->validate());


        $array2 = array(
            "id" => "aa11aa",
            "buchungskreis" => "", #leer
            "v_schluessel" => "12345678", #genaue länge
            "auftragsnr" => "45135060eqw1rf", #zu lang
            "bezeichnung" => "Tagung 12345678900001234567890123456789012345678901234", #zu lang
            "v_land" => "de312", #zu lang
            "v_ort" => "Jülich789012345678901234567890123456", #zulang
            "anmeldefrist_beginn" => "1913070112312", #jahr zu klein + zulang
            "anmeldefrist_ende" => "20131504", #monat existiert nicht
            "v_beginn" => "20130900", #tag existiert nicht
            "v_ende" => "", #ein zeichen zu viel
            "cpd_konto" => "200270789012231", #zulang
            "erloeskonto" => "4510123289372984729", #zulang
            "steuerkennzeichen" => "98rhwrhwerhw", #zu lang
            "steuersatz" => "9412414142fefewsefs", #zu lang
            "ansprechpartner" => "Max Mustermann5678901234567890123", #zulang
            "ansprechpartner_tel" => "012345asd", #buchstaben in tel nr
            "organisationseinheit" => "GB-F5678901234", #zu lang
            #php email validierungsfunktion:
            #[max 64 zeichen]@[max 63 zeichen].[max 63 zeichen]
            "ansprechpartner_mail" => "", #keine geultige mail
            "stellvertreter_mail" => "",
            "standardbetrag" => "1004567890123456789", #zu lang
            "first_date" => "20130103004361", #sekunden auf 61 gesetzt
            "last_date" => "", #skeunden wegfallen lassen
        );

        $this->eventValidate->setValues($array2);
        $this->eventValidate->validate();
        $error = $this->eventValidate->getErrors();
        $this->assertTrue(is_array($error));

        $this->assertEquals($error["id"][1]["error"],1);#idValidate fehler #1 [buchstaben gefunden]
        
        $this->assertEquals($error["buchungskreis"][1]["error"], 1); #defaultValidation fehler #1 [leer]
        $this->assertFalse(array_key_exists(2, $error["buchungskreis"])); #defaultValidation fehler #2 [max zeichen ueberschritten] 
        $this->assertTrue($this->eventValidate->v_schluesselValidate($array2["v_schluessel"])); #defaultValidation exakte max length
        $this->assertEquals($error["auftragsnr"][2]["error"], 1); #defaultValidation fehler #2 [max zeichen ueberschritten]
       
        $this->assertEquals($error["ansprechpartner_mail"][1]["error"], 1); #emailValidation fehler #1 [leer]        
        $this->assertFalse(array_key_exists("stellvertreter_mail", $error));

        $this->assertEquals($error["v_ende"][1]["error"],1); #dateValidation fehler #1 [leer] 
        $this->assertFalse(array_key_exists(1, $error["anmeldefrist_beginn"])); #dateValidation fehler #1 [leer] 
        $this->assertEquals($error["anmeldefrist_beginn"][2]["error"],1); #dateValidation fehler #2 [zeichenlaenge passt nicht] 
        $this->assertEquals($error["anmeldefrist_beginn"][3]["error"],1); #dateValidation fehler #3 [vergangenes jahr] 
        $this->assertFalse(array_key_exists(4, $error["anmeldefrist_beginn"])); #dateValidation fehler #4 [falsches datum] 
        $this->assertFalse(array_key_exists(5, $error["anmeldefrist_beginn"])); #dateValidation fehler #5 [stunde] 
        $this->assertFalse(array_key_exists(6, $error["anmeldefrist_beginn"])); #dateValidation fehler #6 [minute] 
        $this->assertFalse(array_key_exists(7, $error["anmeldefrist_beginn"])); #dateValidation fehler #7 [sekunde] 
        $this->assertEquals($error["anmeldefrist_ende"][4]["error"],1); #dateValidation fehler #4 [falsches datum] 
        $this->assertEquals($error["v_beginn"][4]["error"],1); #dateValidation fehler #4 [falsches datum] 
        $this->assertEquals($error["first_date"][7]["error"],1); #dateValidation fehler #7 [sekunde]
        $this->assertFalse(array_key_exists("last_date", $error)); 
    }

}

?>

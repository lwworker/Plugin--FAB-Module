<?php
include_once(dirname(__FILE__).'/../../../Services/Autoloader/fabAutoloader.php');
/**
 * Test class for lw_zipcheck.
 * Generated by PHPUnit on 2012-11-05 at 12:46:41.
 */
class zipcheckTest extends PHPUnit_Framework_TestCase {

    /**
     * @var lw_zipcheck
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => "C:/xampp/htdocs/c38/contentory/c_server/plugins/"));
        $this->zip = new \Fab\Services\Zipcheck\zipcheck();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testCheckTyp1().
     */
    public function testCheckTyp1() {
        $country = array("name" =>"Chile","maxvalue" => 7, "checktyp" => 1);
        $zip = "1700000"; # PLZ "La Serena"
        $zip2 = "170000Aa";
        $zip3 = "1700 00";
        $zip4 = "123&abc";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(0,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
        $this->assertEquals(0,$this->zip->test($zip4,$country));
    }

    /**
     * @todo Implement testCheckTyp2().
     */
    public function testCheckTyp2() {
        $country = array("name" =>"Australien","maxvalue" => 7, "checktyp" => 2);
        $zip = "2000"; # PLZ "Sydney"
        $zip2 = "20000000";
        $zip3 = "2000 00";
        $zip4 = "123abcd";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(0,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
        $this->assertEquals(0,$this->zip->test($zip4,$country));
    }

    /**
     * @todo Implement testCheckTyp3().
     */
    public function testCheckTyp3() {
        $country = array("name" =>"Schlumpfhausen","maxvalue" => 5, "checktyp" => 3);
        $zip = "DORFf";
        $zip2 = "1111a";
        $zip3 = "1a 00";
        $zip4 = "123";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(1,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
        $this->assertEquals(0,$this->zip->test($zip4,$country));
    }

    /**
     * @todo Implement testCheckTyp4().
     */
    public function testCheckTyp4() {
        $country = array("name" =>"Deutschland","maxvalue" => 5, "checktyp" => 4);
        $zip = "50823"; # PLZ "Koeln"
        $zip2 = "1111a";
        $zip3 = "1a 00";
        $zip4 = "123 5";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(0,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
        $this->assertEquals(0,$this->zip->test($zip4,$country));
    }

    /**
     * @todo Implement testCheckTyp5().
     */
    public function testCheckTyp5() {
        $country = array("name" =>"Verein. KÃ¶nigr.","maxvalue" => 9, "checktyp" => 5);
        $zip = "EC1A"; # PLZ "London - Aldersgate"
        $zip2 = "EC1A 1EA"; # PLZ "Greater London - Clerkenwell"
        $zip3 = "12345abcdef";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(1,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
    }

    /**
     * @todo Implement testCheckTyp6().
     */
    public function testCheckTyp6() {
        $country = array("name" =>"Japan","maxvalue" => 7, "checktyp" => 6);
        $zip = "1230853"; # PLZ "Tokyo - Motoki"
        $zip2 = "123 085";
        $zip3 = "12308531";
        $zip4 = "123085a";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(1,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
        $this->assertEquals(0,$this->zip->test($zip4,$country));
    }

    /**
     * @todo Implement testCheckTyp7().
     */
    public function testCheckTyp7() {
        $country = array("name" =>"Brasilien","maxvalue" => 9, "checktyp" => 7);
        $zip = "68388-000"; # PLZ "Bannach"
        $zip2 = "68388-abc";
        $zip3 = "68388-0000234842893";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(1,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
    }

    /**
     * @todo Implement testCheckTyp8().
     */
    public function testCheckTyp8() {
        $country = array("name" =>"Schlumpfhausen","maxvalue" => 5, "checktyp" => 8);
        $zip = "12345";
        $zip2 = "1111a";
        $zip3 = "1a 00";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(0,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
    }

    /**
     * @todo Implement testCheckTyp9().
     */
    public function testCheckTyp9() {
        $country = array("name" =>"Niederlande","maxvalue" => 6, "checktyp" => 9, "pattern" => "NNNN AA");
        $zip = "4325 AA"; # PLZ "Renesse"
        $zip2 = "AAAA 44";
        $zip3 = "12c5 5ddf";
        $this->assertEquals(1,$this->zip->test($zip,$country));
        $this->assertEquals(0,$this->zip->test($zip2,$country));
        $this->assertEquals(0,$this->zip->test($zip3,$country));
    }

    /**
     * @todo Implement testGetCountry().
     */
    public function testGetCountry() {
        $de = array("name" =>"Deutschland","maxvalue" => 5, "checktyp" => 4);
        $this->assertEquals($de, $this->zip->getCountry("DE"));
        $this->assertFalse($this->zip->getCountry("AA"));
    }

}

?>
